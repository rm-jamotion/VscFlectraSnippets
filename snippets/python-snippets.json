{
    "Manifest": {
        "prefix": "flmanifest",
        "body": [
            "{",
            "\t'name': '${1}',",
            "\t'version': '${2:1.0}',",
            "\t'description': '${3}',",
            "\t'summary': '${4}',",
            "\t'author': '${5}',",
            "\t'website': '${6}',",
            "\t'license': '${7:LGPL-3}',",
            "\t'category': '${8}',",
            "\t'depends': [\n\t\t'${9}'\n\t],",
            "\t'data': [\n\t\t'${10}'\n\t],",
            "\t'demo': [\n\t\t'${11}'\n\t],",
            "\t'auto_install': ${12|True,False|},",
            "\t'application': ${13|True,False|},",
            "}"
        ],
        "description": "Add manifest json"
    },
    "Import": {
        "prefix": "flimport",
        "body": [
            "from flectra import _, api, fields, models",
            "\n"
        ],
        "description": "Add an import"
    },
    "From exceptions import": {
        "prefix": "flfeimport",
        "body": [
            "from flectra.exceptions import ${100|ValidationError,RedirectWarning,AccessDenied,AccessError,CacheMiss,MissingError,UserError|}"
        ],
        "description" : "Add an import from flectra exceptions"
    },
    "Import logging": {
        "prefix": "fllimport",
        "body": [
            "import logging",
            "\n\n_logger = logging.getLogger(__name__)",
            "\n"
        ],
        "description" : "Add an import from logging and create logger"
    },
    "From import": {
        "prefix": "flfimport",
        "body": "from . import ${1:names}",
        "description" : "Add from import"
    },
    "Model": {
        "prefix": "flmodel",
        "body": [
            "class ${30:${20/([a-z]+)[\\._]?/${1:/capitalize}/g}}(models.${40|Model,AbstractModel,TransientModel|}):",
            "\t${10|_name,_inherit|} = '${20:model.technical.name}'",
            "\t_description = '${50:${20/([a-z]+)([\\._]?)/${1:/capitalize}${2:+ }/g}}'",
            "\t"
        ],
        "description": "Add model"
    },
    "Char field": {
        "prefix": "flfchar",
        "body": [
            "${1:field_name} = fields.Char(",
            "\tstring='${1/([^_]*)(_?)/${1:/capitalize}${2:+ }/g}',",
            ")${0}"
        ],
        "description": "Add char field"
    },
    "Text field": {
        "prefix": "flftext",
        "body": [
            "${1:field_name} = fields.Text(",
            "\tstring='${2}',",
            ")${0}"
        ],
        "description": "Add text field"
    },
    "Html field": {
        "prefix": "flfhtml",
        "body": [
            "${1:field_name} = fields.Html(",
            "\tstring='${2}',"
            ,")${0}"
        ],
        "description": "Add html field"
    },
    "Boolean field": {
        "prefix": "flfboolean",
        "body": [
            "${1:field_name} = fields.Boolean(",
            "\tstring='${2}',",
            ")${0}"
        ],
        "description": "Add boolean field"
    },
    "Integer field": {
        "prefix": "flfinteger",
        "body": [
            "${1:field_name} = fields.Integer(",
            "\tstring='${2}',",
            ")${0}"
        ],
        "description": "Add integer field"
    },
    "Float field": {
        "prefix": "flffloat",
        "body": [
            "${1:field_name} = fields.Float(",
            "\tstring='${2}',",
            "\tdigits=(${3:total, decimal}),",
            ")${0}"
        ],
        "description": "Add float field"
    },
    "Selection field": {
        "prefix": "flfselection",
        "body": [
            "${1:field_name} = fields.Selection([",
            "\t('${2:key}', '${3:value}')",
            "],",
            "\tstring='${4}',",
            ")${0}"
        ],
        "description": "Add selection field"
    },
    "Date field": {
        "prefix": "flfdate",
        "body": [
            "${1:field_name} = fields.Date(",
            "\tstring='${2}',",
            ")${0}"
        ],
        "description": "Add date field"
    },
    "Datetime field": {
        "prefix": "flfdatetime",
        "body": [
            "${1:field_name} = fields.Datetime(",
            "\tstring='${2}',",
            ")${0}"
        ],
        "description": "Add datetime field"
    },
    "Binary field": {
        "prefix": "flfbinary",
        "body": [
            "${1:field_name} = fields.Binary(",
            "\tstring='${2}',",
            ")${0}"
        ],
        "description": "Add binary field"
    },
    "Monetary field": {
        "prefix": "flfmonetary",
        "body": [
            "${1:field_name} = fields.Monetary(",
            "\tstring='${2}',",
            ")${0}"
        ],
        "description": "Add monetary field"
    },
    "Many2one field": {
        "prefix": "flfmany2one",
        "body": [
            "${1:field_name} = fields.Many2one(",
            "\tcomodel_name='${2:comodel_name}',",
            "\tstring='${3}',",
            ")${0}"
        ],
        "description": "Add many2one field"
    },
    "One2many field": {
        "prefix": "flfone2many",
        "body": [
            "${1:field_name} = fields.One2many(",
            "\tcomodel_name='${2:comodel_name}',",
            "\tinverse_name='${3:inverse_field_name}',",
            "\tstring='${4}',",
            ")${0}"
        ],
        "description": "Add one2many field"
    },
    "Many2many field": {
        "prefix": "flfmany2many",
        "body": [
            "${1:field_name} = fields.Many2many(",
            "\tcomodel_name='${2:comodel_name}',",
            "\tstring='${3}',",
            ")${0}"
        ],
        "description": "Add many2many field"
    },
    "Compute field": {
        "prefix": "flfcompute",
        "body": [
            "${1:field_name} = fields.${2|Char,Text,Html,Boolean,Integer,Float,Date,Datetime,Binary,Monetary|}(",
            "\tstring='${3}',",
            "\tcompute='_compute_${1}',",
            ")",
            "",
            "@api.depends('${0}')",
            "def _compute_${1}(self):",
            "\tpass"
        ],
        "description": "Add compute field"
    },
    "Compute field with inverse": {
        "prefix": "flfcomputei",
        "body": [
            "${1:field_name} = fields.${2|Char,Text,Html,Boolean,Integer,Float,Date,Datetime,Binary|}(",
            "\tstring='${3}',",
            "\tcompute='_compute_${1}',",
            "\tinverse='_inverse_${1}',",
            ")",
            "",
            "@api.depends('${0}')",
            "def _compute_${1}(self):",
            "\tpass",
            "def _inverse_${1}(self):",
            "\tpass"
        ],
        "description": "Add compute field with inverse method"
    },
    "Onchange field": {
        "prefix": "flfonchange",
        "body": [
            "@api.onchange('${1}')",
            "def _onchange_${1}(self):",
            "\t${0:pass}"
        ],
        "description": "Add onchange field"
    },
    "SQL Constraints": {
        "prefix": "flfconstrains",
        "body": [
            "_sql_constraints = [",
            "\t(\"${1:field_name}_${2|check,unique|}\", \"${2}(${1})\", \"${3:Error message}\"),",
            "]"
        ],
        "description": "Add SQL constraints to check or unique field"
    },
    "Python Constrains": {
        "prefix": "flfconstrains",
        "body": [
            "@api.constrains('${1:fieldname}')",
            "def _constrains_${1}(self):",
            "\t${0:pass}"
        ],
        "description": "Add a python constrains"
    },
    "Ensure one record": {
        "prefix": "flone",
        "body": [
            "self.ensure_one()"
        ],
        "description": "Ensure one record passing to this method"
    },
    "Override hook method": {
        "prefix": "flsuper",
        "body": [
            "def ${1:method_name}(self, ${2:vals}):",
            "\tresult = super().${1:method_name}(${2:vals})",
            "\t${0}",
            "\treturn result"
        ],
        "description": "Add an override hook method"
    },
    "Create method": {
        "prefix": "flcreate",
        "body": [
            "@api.model_create_multi",
            "def create(self, ${2:vals}):",
            "\treturn super().create(${2:vals})"
        ],
        "description": "Add create method"
    },
    "Write method": {
        "prefix": "flwrite",
        "body": [
            "def write(self, vals):",
            "\tresult = super().write(vals)",
            "\treturn result"
        ],
        "description": "Add write method"
    },
    "Unlink method": {
        "prefix": "flunlink",
        "body": [
            "def unlink(self):",
            "\treturn super().unlink()"
        ],
        "description": "Add unlink method"
    }
}
